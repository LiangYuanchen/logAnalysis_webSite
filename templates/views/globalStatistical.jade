extends ../layouts/default

block head
  link(rel="stylesheet", type="text/css", href="easyui/themes/default/easyui.css")
  link(rel="stylesheet", type="text/css", href="easyui/themes/icon.css")
block content
       .container: .jumbotron
               form(method='get')
                       if onStatistical
                          span(style="color:red") #{new Date(onStatistical*1000).toDateString()} 数据整理中……                
                       input(type='hidden', name='action', value='statistical')               
                       label 开始时间
                       input.easyui-datebox(name="op",value=filters["op"])                        
                       label 结束时间
                       input.easyui-datebox(name="ed",value=filters["ed"])         
                       include ../layouts/country
                       include ../layouts/onlypaid
                       include ../layouts/region
                       input(type="submit",value="检索",name="sub")
               each ys in categories
                       if ys.name.substring(0,8)!="advLevel" && ys.name.substring(0,11)!="legendLevel"
                          div(style="min-width:700px;height:400px",class="#{ys.name}")
                       else if ys.name.substring(0,9)=="advLevel1"
                          div(style="min-width:700px;height:400px",class="advlevel")
                       else if ys.name.substring(0,12)=="legendLevel1"
                          div(style="min-width:700px;height:400px",class="legendlevel")
block js
               script(type="text/javascript", src="/js/highcharts.js")
               script(type="text/javascript", src="/js/exporting.js")
               script(type="text/javascript", src="/js/jeasyui.js")
               script(type="text/javascript", src="/js/underscore-min.js")
               script(type="text/javascript").
                var a=[];
                   function inithighcharts(name,text,datas){
                      $('.'+datas.category.name).highcharts({
                          title: {
                              text: datas.category.text
                          },                      
                          xAxis: {
                              categories: datas.datas.keys
                          },
                           yAxis: {
                                 title: {
                                     text: datas.category.yname,
                                 }
                             },
                          series: [{
                              type: 'column',
                              name: datas.category.name,
                              key:datas.category.keys,
                              data: datas.datas.values
                          }]
                      });
                      a.push(datas);
                   }
                    function inithighchartsShow(name,text,datas){
                          $('.'+datas.category.name).highcharts({
                            title: {
                                text: datas.category.text
                            },                        
                            scrollbar: {
                                enabled: true
                            },
                            xAxis: {
                                categories: datas.datas.keys,
                                labels:{
                                    step:6,
                                    staggerLines:1
                                }
                            },
                             yAxis: {
                                   title: {
                                       text: datas.category.yname,
                                   }
                               },
                            series: [{
                                type: 'column',
                                name: datas.category.name,
                                key:datas.category.keys,
                                data: datas.datas.values
                            }]
                        });                
                    }
                    function getFormat(){
                      if(this.isFirst)
                        return this.value;
                      if(this.isLast)
                        return this.value;
                      return "";
                    }

                   var starLevelNames = ["advLevel1","advLevel2","advLevel3","advLevel4","advLevel5"];
                   var starLevel = {text:"冒险者星级等级分布",name:"advlevel",keys:[],datas:[],values:[],holdtime:0};
                   var starLegend = ["legendLevel1","legendLevel2","legendLevel3","legendLevel4","legendLevel5"];
                   var legendLevel = {text:"冒险者星级等级分布",name:"legendlevel",keys:[],datas:[],values:[],holdtime:0};
                   var categories = !{JSON.stringify(categories)};
                   function getStarLevel(starsLevel,stars)
                   {
                       for(var i=0;i<starsLevel.length;i++)
                        {
                          var starLevelValues = _.filter(stars.datas,function(parm){
                            return parm.category.name==starsLevel[i]
                            });
                          starLevelValues = starLevelValues[0];
                          var values = {name:starsLevel[i],value:[]};
                          for(var j=0;j<stars.keys.length;j++){
                                var hasValue = false;
                                for(var k=0;k<starLevelValues.datas.keys.length;k++)
                                  {
                                     if(starLevelValues.datas.keys[k] == stars.keys[j]){
                                       values.value.push(starLevelValues.datas.values[k]);
                                       hasValue = true;
                                       break;
                                       }
                                  }
                                if(!hasValue)
                                  values.value.push(0);

                          }
                          stars.values.push(values);
                        }
                        stars.text = stars.datas[0].category.text;
                      $('.'+stars.name).highcharts({
                          title: {
                              text: stars.text
                          },
                          xAxis: {
                              categories: stars.keys
                          },
                          chart: {
                              type: 'column'
                          },
                          plotOptions: {
                              column: {
                                  stacking: 'percent'
                              }
                          },
                           yAxis: {
                                min: 0,
                                title: {
                                    text: 'Total advLevel'
                                }
                            },
                          tooltip: {
                              pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
                              shared: true
                          },
                          series: [{
                              name: stars.values[0].name,
                              data: stars.values[0].value
                          },
                          {
                              name: stars.values[1].name,
                              data: stars.values[1].value
                          },
                          {
                              name: stars.values[2].name,
                              data: stars.values[2].value
                          },
                          {
                              name: stars.values[3].name,
                              data: stars.values[3].value
                          },
                          {
                              name: stars.values[4].name,
                              data: stars.values[4].value
                          }]
                      });
                   }
                   $(function () {
                      for(var i=0;i<categories.length;i++){
                        var category = categories[i];
                        if (category){
                           var op=$("[name=op]").val();
                           var ed=$("[name=ed]").val();
                           var country=$("[name=country]").val();
                           var onlypaid=$("#onlypaid").attr("checked");
                           var region = $('#region').combo('getValue');
                          $.post("/globalStatistical",{stype:category.sType,op:op,ed:ed,country:country,onlypaid:onlypaid,region:region},function(result){
                              if(_.contains(starLevelNames,result.category.name))
                                {
                                  starLevel.keys = _.uniq(starLevel.keys.concat(result.datas.keys));
                                  starLevel.datas.push(result);
                                  starLevel.holdtime++;
                                }
                              else if(_.contains(starLegend,result.category.name))
                                {
                                  legendLevel.keys = _.uniq(legendLevel.keys.concat(result.datas.keys));
                                  legendLevel.datas.push(result);
                                  legendLevel.holdtime++;
                                }
                              else{
                                if(result.category.show)
                                  inithighchartsShow(result.category.name,result.category.text,result);
                                else
                                  inithighcharts(result.category.name,result.category.text,result);
                              }
                                if(starLevel.holdtime==5)
                                  {
                                      starLevel.holdtime++;
                                      getStarLevel(starLevelNames,starLevel);
                                  }
                                if(legendLevel.holdtime==5)
                                  {
                                      legendLevel.holdtime++;
                                      getStarLevel(starLegend,legendLevel);  
                                  } 
                            });
                        }
                      }
                   });                 
