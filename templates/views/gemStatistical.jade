extends ../layouts/default

block head
  link(rel="stylesheet", type="text/css", href="easyui/themes/default/easyui.css")
  link(rel="stylesheet", type="text/css", href="easyui/themes/icon.css")
block content
       .container: .jumbotron
               form(method='get')
                       input(type='hidden', name='action', value='statistical')
                       label 开始时间
                       input.easyui-datebox(name="op",value=filters["op"])                        
                       label 结束时间
                       input.easyui-datebox(name="ed",value=filters["ed"]) 
                       include ../layouts/country
                       include ../layouts/onlypaid
                       include ../layouts/region
                       input(name="num",type="hidden",value="100000")                     
                       input(type="submit",value="检索",name="sub")
                       //input(type="button",value="demoJSON",name="demo",onclick="demo")
               each ys in configs
                       div(style="min-width:700px;height:400px",class="#{ys.name}")
               each ys in categories
                          div(style="min-width:700px;height:400px",class="#{ys.name}")

block js
               script(type="text/javascript", src="/js/highcharts.js")
               script(type="text/javascript", src="/js/exporting.js")
               script(type="text/javascript", src="/js/jeasyui.js")
               script(type="text/javascript", src="/js/underscore-min.js")
               script(type="text/javascript").
                     var configs=!{JSON.stringify(configs)};
                     var map_property = {GemGet:"宝石收入",GemGetPaidMan:"付费用户宝石收入",GemCost:"宝石消耗",GemCostPaidMan:"付费用户宝石消耗",GemConsumed:"真宝石收入",GemConsumedPaidMan:"付费用户真宝石收入",TaskTakeRW:"成就",Register:"注册",Activity:"活动",MonthCard:"月卡",buygem:"真实宝石",buygemother:"赠送宝石",SmithMakeFinish:"装备加速",DishCookFinish:"食物加速",PvPShopRefresh:"PvP商店刷新",OdysseyShopRefresh:"奥德赛商店刷新",NormalShopRefresh:"普通商店刷新",CoinShopRefresh:"金币商店刷新",BlackShopRefresh:"黑市商店刷新",QuestSweep:"扫荡关卡",AdvSummon:"冒险者招募",PvPGet:"PvP列表刷新",QuestEliteReset:"奥德赛重置",Revenge:"复仇",TavernBuyEnergy:"购买体力",coinShopPurchase:"购买金币",blackShopPurchase:"黑市",QuestResetCount:"关卡重置",EquipReplenish:"装备材料补齐"};
                       $(function(){
                               connect();
                               $("[name=sub]").click(function(){
                                  connect();
                                });
                               });
                       function connect(){
                               //alert("configs.count:"+configs.length);
                               var cb=function(i){
                                       //alert("now config:"+i);
                                       if(i!=configs.length-1)
                                               showAll(++i,cb);
                                       };              
                               showAll(0,cb);
                       }
                       function showAll(i,next){
                               var name = configs[i].name;
                               dataBind(name,function(){
                                       next(i);
                                       });
                       }
                       function dataBind(name,next){
                               var op=$("[name=op]").val();
                               var ed=$("[name=ed]").val();
                               var num=$("[name=num]").val();
                               var country=$("#country").val();
                               var onlypaid = $("#onlypaid").attr("checked");
                               var region = $('#region').combo('getValue');
                               $.post('/jsonServer?ttype=1&name='+name,{action:"phaseStatistical",region:region,op:op,ed:ed,num:num,country:country,onlypaid:onlypaid},function(data){
                                       init(name,data);
                                       next();
                               });     
                       }
                       function init(name,data){
                            var config ={
                               title: {
                                   text:data.title,
                                   x: -20 //center
                               },
                               subtitle: {
                                   text: data.subtitle,
                                   x: -20
                               },
                               xAxis: {
                                   categories: data.xAxis.reverse(),
                               },
                               yAxis: {
                                   title: {
                                       text: data.ytitle,
                                   },
                                   plotLines: [{
                                       value: 0,
                                       width: 1,
                                       color: '#808080'
                                   }]
                               },
                               tooltip: {
                                   headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                                   pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                                       '<td style="padding:0"><b>{point.y} 个</b></td></tr>',
                                   footerFormat: '</table>',
                                   shared: true,
                                   useHTML: true
                               },
                               legend: {
                                   layout: 'vertical',
                                   align: 'right',
                                   verticalAlign: 'middle',
                                   borderWidth: 0
                               },
                               series: []
                           }
                           if(name=="GemGetBuyC"||name=="GemGetBuyPaidManC")
                            {
                               config.chart = {type:'column'};
                            }
                           
                           for (var property in data.yAxis){
                                   var thename = property;
                                   if(map_property[property])
                                      thename = map_property[property];
                                   var serie={name:thename,data:data.yAxis[property].reverse()};
                                   config.series.push(serie);      
                           } 
                           //console.log(JSON.stringify(config));
                           $('.'+name).highcharts(config);
                       }
               script(type="text/javascript").
                var a=[];
                   function inithighcharts(name,text,datas){
                      for(var i = 0;i<datas.datas.keys.length;i++)
                        {
                          if(map_property[datas.datas.keys[i]])
                            {
                              datas.datas.keys[i] = map_property[datas.datas.keys[i]];
                            }
                        }
                        if(name=="gemGetContent")
                          {
                            $('.'+datas.category.name).highcharts({
                                title: {
                                    text: datas.category.text
                                },                      
                                xAxis: {
                                    categories: datas.datas.keys,
                                      labels:{
                                          step:1,
                                          staggerLines:1
                                      }
                                },
                                 yAxis: {
                                       title: {
                                           text: datas.category.yname,
                                       }
                                   },
                                series: [{
                                    type: 'column',
                                    name: datas.category.name,
                                    key:datas.category.keys,
                                    data: datas.datas.values
                                }]
                            });
                          }
                        else{
                          $('.'+datas.category.name).highcharts({
                              title: {
                                  text: datas.category.text
                              },                      
                              xAxis: {
                                  categories: datas.datas.keys,
                                    labels:{
                                        step:1,
                                        staggerLines:2
                                    }
                              },
                               yAxis: {
                                     title: {
                                         text: datas.category.yname,
                                     }
                                 },
                              series: [{
                                  type: 'column',
                                  name: datas.category.name,
                                  key:datas.category.keys,
                                  data: datas.datas.values
                              }]
                          });
                        }
                      a.push(datas);
                   }
                    function inithighchartsShow(name,text,datas){
                      for(var i = 0;i<datas.datas.keys.length;i++)
                        {
                          if(map_property[datas.datas.keys[i]])
                            {
                              datas.datas.keys[i] = map_property[datas.datas.keys[i]];
                            }
                        }                    
                          $('.'+datas.category.name).highcharts({
                            title: {
                                text: datas.category.text
                            },                        
                            scrollbar: {
                                enabled: true
                            },
                            xAxis: {
                                categories: datas.datas.keys,
                                labels:{
                                    step:6,
                                    staggerLines:1
                                }
                            },
                             yAxis: {
                                   title: {
                                       text: datas.category.yname,
                                   }
                               },
                            series: [{
                                type: 'column',
                                name: datas.category.name,
                                key:datas.category.keys,
                                data: datas.datas.values
                            }]
                        });                
                    }
                    function getFormat(){
                      if(this.isFirst)
                        return this.value;
                      if(this.isLast)
                        return this.value;
                      return "";
                    }

                   var starLevelNames = ["advLevel1","advLevel2","advLevel3","advLevel4","advLevel5"];
                   var starLevel = {text:"冒险者星级等级分布",name:"advlevel",keys:[],datas:[],values:[],holdtime:0};
                   var starLegend = ["legendLevel1","legendLevel2","legendLevel3","legendLevel4","legendLevel5"];
                   var legendLevel = {text:"冒险者星级等级分布",name:"legendlevel",keys:[],datas:[],values:[],holdtime:0};
                   var categories = !{JSON.stringify(categories)};
                   function getStarLevel(starsLevel,stars)
                   {
                       for(var i=0;i<starsLevel.length;i++)
                        {
                          var starLevelValues = _.filter(stars.datas,function(parm){
                            return parm.category.name==starsLevel[i]
                            });
                          starLevelValues = starLevelValues[0];
                          var values = {name:starsLevel[i],value:[]};
                          for(var j=0;j<stars.keys.length;j++){
                                var hasValue = false;
                                for(var k=0;k<starLevelValues.datas.keys.length;k++)
                                  {
                                     if(starLevelValues.datas.keys[k] == stars.keys[j]){
                                       values.value.push(starLevelValues.datas.values[k]);
                                       hasValue = true;
                                       break;
                                       }
                                  }
                                if(!hasValue)
                                  values.value.push(0);

                          }
                          stars.values.push(values);
                        }
                        stars.text = stars.datas[0].category.text;
                      $('.'+stars.name).highcharts({
                          title: {
                              text: stars.text
                          },
                          xAxis: {
                              categories: stars.keys
                          },
                          chart: {
                              type: 'column'
                          },
                          plotOptions: {
                              column: {
                                  stacking: 'percent'
                              }
                          },
                           yAxis: {
                                min: 0,
                                title: {
                                    text: 'Total advLevel'
                                }
                            },
                          tooltip: {
                              pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
                              shared: true
                          },
                          series: [{
                              name: stars.values[0].name,
                              data: stars.values[0].value
                          },
                          {
                              name: stars.values[1].name,
                              data: stars.values[1].value
                          },
                          {
                              name: stars.values[2].name,
                              data: stars.values[2].value
                          },
                          {
                              name: stars.values[3].name,
                              data: stars.values[3].value
                          },
                          {
                              name: stars.values[4].name,
                              data: stars.values[4].value
                          }]
                      });
                   }
                   $(function () {
                      for(var i=0;i<categories.length;i++){
                        var category = categories[i];
                        if (category){
                          var logdate = $("[name=logdate]").val();
                           var op=$("[name=op]").val();
                           var ed=$("[name=ed]").val();
                           var country=$("#country").val();
                           var onlypaid=$("#onlypaid").attr("checked");
                           var region = $('#region').combo('getValue');
                          $.post("/globalStatistical",{stype:category.sType,logdate:logdate,region:region,op:op,ed:ed,country:country,onlypaid:onlypaid},function(result){
                              if(_.contains(starLevelNames,result.category.name))
                                {
                                  starLevel.keys = _.uniq(starLevel.keys.concat(result.datas.keys));
                                  starLevel.datas.push(result);
                                  starLevel.holdtime++;
                                }
                              else if(_.contains(starLegend,result.category.name))
                                {
                                  legendLevel.keys = _.uniq(legendLevel.keys.concat(result.datas.keys));
                                  legendLevel.datas.push(result);
                                  legendLevel.holdtime++;
                                }
                              else{
                                if(result.category.show)
                                  inithighchartsShow(result.category.name,result.category.text,result);
                                else
                                  inithighcharts(result.category.name,result.category.text,result);
                              }
                                if(starLevel.holdtime==5)
                                  {
                                      starLevel.holdtime++;
                                      getStarLevel(starLevelNames,starLevel);
                                  }
                                if(legendLevel.holdtime==5)
                                  {
                                      legendLevel.holdtime++;
                                      getStarLevel(starLegend,legendLevel);  
                                  } 
                            });
                        }
                      }
                   });    
